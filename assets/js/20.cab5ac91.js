(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{332:function(a,t,r){"use strict";r.r(t);var s=r(10),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"《asp-net-core-技术内幕与项目实战》"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《asp-net-core-技术内幕与项目实战》"}},[a._v("#")]),a._v(" 《ASP.NET Core 技术内幕与项目实战》")]),a._v(" "),t("h2",{attrs:{id:"net-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#net-core"}},[a._v("#")]),a._v(" .NET Core")]),a._v(" "),t("h3",{attrs:{id:"net-core-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#net-core-是什么"}},[a._v("#")]),a._v(" .NET Core 是什么")]),a._v(" "),t("p",[a._v(".NET Core 是.NET Framework 的基础上的新一代跨平台开发技术，可以开发能在容器中运行微服务的城西，以便与开发能应对高并发，高负载的系统。")]),a._v(" "),t("h3",{attrs:{id:"net-core-的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#net-core-的优点"}},[a._v("#")]),a._v(" .NET Core 的优点")]),a._v(" "),t("ol",[t("li",[a._v("分模块开发，各组件可以单独配置，版本可以不同")]),a._v(" "),t("li",[a._v("支持独立部署，不需要在服务器上安装")]),a._v(" "),t("li",[a._v("效率高，管道可拔插，换顺序")]),a._v(" "),t("li",[a._v("kestral web框架，可以搭载缓存，https等组件")]),a._v(" "),t("li",[a._v("符合如今软件设计思想")])]),a._v(" "),t("h2",{attrs:{id:"asp-net-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asp-net-core"}},[a._v("#")]),a._v(" ASP.NET Core")]),a._v(" "),t("h3",{attrs:{id:"asp-net-core是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asp-net-core是什么"}},[a._v("#")]),a._v(" ASP.NET Core是什么")]),a._v(" "),t("p",[a._v("在.NET Core平台下进行的web开发和后端接口开发的技术；")]),a._v(" "),t("p",[a._v("是一个跨平台的高性能开源框架，用于构建基于云且通过互联网链接的应用程序。")]),a._v(" "),t("h2",{attrs:{id:"异步编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[a._v("#")]),a._v(" 异步编程")]),a._v(" "),t("h3",{attrs:{id:"异步编程的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程的优点"}},[a._v("#")]),a._v(" 异步编程的优点")]),a._v(" "),t("p",[a._v("可以提高服务器端接待的请求数量，但不会提高单个处理效率；")]),a._v(" "),t("h3",{attrs:{id:"异步编程的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程的原理"}},[a._v("#")]),a._v(" 异步编程的原理")]),a._v(" "),t("h3",{attrs:{id:"await-async原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#await-async原理"}},[a._v("#")]),a._v(" await async原理")]),a._v(" "),t("p",[a._v("await调用async方法，是在async方法执行结束后再进行下面代码的执行。")]),a._v(" "),t("h3",{attrs:{id:"异步方法注意的点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步方法注意的点"}},[a._v("#")]),a._v(" 异步方法注意的点")]),a._v(" "),t("ol",[t("li",[a._v("返回值用"),t("code",[a._v("Task<T>")]),a._v(", 如果无返回值用Task")]),a._v(" "),t("li",[a._v("异步方法需要已async结尾修饰")]),a._v(" "),t("li",[a._v("异步方法具有传染性，需要用await调用async方法，async方法也需要await调用。")])]),a._v(" "),t("h3",{attrs:{id:"线程切换原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程切换原理"}},[a._v("#")]),a._v(" 线程切换原理")]),a._v(" "),t("h2",{attrs:{id:"linq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linq"}},[a._v("#")]),a._v(" LINQ")]),a._v(" "),t("h2",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[a._v("#")]),a._v(" 缓存")]),a._v(" "),t("h2",{attrs:{id:"配置系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置系统"}},[a._v("#")]),a._v(" 配置系统")]),a._v(" "),t("h2",{attrs:{id:"依赖注入-denpendency-injection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入-denpendency-injection"}},[a._v("#")]),a._v(" 依赖注入(Denpendency Injection)")]),a._v(" "),t("h3",{attrs:{id:"控制反转-inversion-of-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-inversion-of-control"}},[a._v("#")]),a._v(" 控制反转(Inversion of control)")]),a._v(" "),t("p",[a._v("控制反转是设计模式中非常重要的思想，依赖注入是控制反转思想的一种非常重要的实现方式。")]),a._v(" "),t("h3",{attrs:{id:"依赖注入的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入的作用"}},[a._v("#")]),a._v(" 依赖注入的作用")]),a._v(" "),t("p",[a._v("将程序的各组件以低耦合的方式链接到一起")]),a._v(" "),t("h3",{attrs:{id:"依赖注入的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入的生命周期"}},[a._v("#")]),a._v(" 依赖注入的生命周期")]),a._v(" "),t("ol",[t("li",[a._v("瞬态")]),a._v(" "),t("li",[a._v("范围scope")]),a._v(" "),t("li",[a._v("单例")])]),a._v(" "),t("p",[a._v("注：不要在长生命周期的对象中引用比他短的生命周期的对象")]),a._v(" "),t("h2",{attrs:{id:"ef-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ef-core"}},[a._v("#")]),a._v(" EF Core")]),a._v(" "),t("h3",{attrs:{id:"dapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dapper"}},[a._v("#")]),a._v(" Dapper")]),a._v(" "),t("h2",{attrs:{id:"restful"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful"}},[a._v("#")]),a._v(" RESTful")]),a._v(" "),t("p",[a._v("REST是一种软件开发标准概念。")]),a._v(" "),t("p",[a._v("以REST思想为指导开发的程序，我们就称这个程序是RESTful风格的。")]),a._v(" "),t("h3",{attrs:{id:"restful优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful优缺点"}},[a._v("#")]),a._v(" RESTful优缺点")]),a._v(" "),t("h3",{attrs:{id:"restful折中方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful折中方案"}},[a._v("#")]),a._v(" RESTful折中方案")]),a._v(" "),t("h3",{attrs:{id:"前后端分离的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离的优缺点"}},[a._v("#")]),a._v(" 前后端分离的优缺点")]),a._v(" "),t("h2",{attrs:{id:"筛选器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#筛选器"}},[a._v("#")]),a._v(" 筛选器")]),a._v(" "),t("h2",{attrs:{id:"中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[a._v("#")]),a._v(" 中间件")]),a._v(" "),t("h2",{attrs:{id:"signalr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signalr"}},[a._v("#")]),a._v(" SignalR")]),a._v(" "),t("p",[a._v("SignalR")]),a._v(" "),t("h2",{attrs:{id:"rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[a._v("#")]),a._v(" RabbitMQ")]),a._v(" "),t("h2",{attrs:{id:"ddd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ddd"}},[a._v("#")]),a._v(" DDD")]),a._v(" "),t("p",[a._v("领域驱动设计")])])}),[],!1,null,null,null);t.default=e.exports}}]);